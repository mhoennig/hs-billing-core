plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.21'
    id 'application'
    id 'jacoco'
    id 'info.solidsoft.pitest' version '1.5.2'
    id "io.gitlab.arturbosch.detekt" version "1.15.0"
    id 'org.barfuin.gradle.taskinfo' version '1.0.5'
    id "org.owasp.dependencycheck" version "6.0.3"
    id 'com.adarshr.test-logger' version '2.1.1'
}

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    ktlint
    maybeCreate("pitest")
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}

compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}

dependencies {
    ext.kotlinVersion = '1.4.21'
    ext.junit_version = "5.7.0"

    // Align versions of all Kotlin components
    implementation platform('org.jetbrains.kotlin:kotlin-bom')

    // Kotlin standard libraries
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    // we don't need logging, avoid warning on startup
    implementation 'org.slf4j:slf4j-nop:1.7.30'

    // other
    implementation 'org.apache.velocity:velocity:1.7'
    implementation 'com.github.doyaaaaaken:kotlin-csv-jvm:0.13.0'

    // unit testing libraries
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_version"
    testImplementation 'com.willowtreeapps.assertk:assertk-jvm:0.23'
    testImplementation "io.mockk:mockk:1.10.5"
    testImplementation 'com.tngtech.archunit:archunit-junit5:0.15.0'
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"

    // mutation testing libraries
    testImplementation 'org.pitest:pitest-junit5-plugin:0.12'

    // linting
    ktlint "com.pinterest:ktlint:0.40.0"
}

build {
    dependsOn 'pitest'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // generate report after tests
}

// --- testlogger -- prettier output for test results

testlogger {
    theme 'mocha' // project level
    slowThreshold 1000
    logLevel 'quiet'
    showPassed false
    showStackTraces false
}

// --- jacoco plugin configuration --- measures code coverage of unit tests ---

jacocoTestReport {
    dependsOn test
}

jacoco {
    toolVersion = "0.8.6"
    reportsDir = file("$buildDir/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco")
    }
}

jacocoTestCoverageVerification {
    dependsOn test

    violationRules {
        rule {
            element = 'CLASS'
            includes = ['org.hostsharing.hsadmin.billing.core.*']
            excludes = ['*.DefaultImpls'] // generated by Kotlin for interfaces with default implementations

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
            limit {
                counter = 'LINE'
                value = 'MISSEDCOUNT'
                maximum = 2
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.85
            }
            limit {
                counter = 'BRANCH'
                value = 'MISSEDCOUNT'
                maximum = 2
            }
        }
        rule {
            element = 'METHOD'
            includes = ['org.hostsharing.hsadmin.billing.core.*']
            excludes = ['equals']

            limit {
                counter = 'COMPLEXITY'
                value = 'TOTALCOUNT'
                maximum = 8
            }
        }
    }
}
check.dependsOn jacocoTestCoverageVerification


// --- pitest configuration --- runs mutation tests, thus testing the quality of the unit tests ---

pitest {
    junit5PluginVersion.set('0.12')
    targetClasses.set(['org.hostsharing.hsadmin.billing.core.*'])
    pitestVersion.set('1.6.1') // not to confuse with the solidsoft gradle-plugin version
    threads.set(4)
    outputFormats.set(['XML', 'HTML'])
    timestampedReports.set(false)
    mutationThreshold.set(90)
    coverageThreshold.set(95)
    mutators.set(["STRONGER", "DEFAULTS"])
    avoidCallsTo.set([
        "kotlin.jvm.internal",
        "kotlinx.coroutines",
        "kotlin.io.CloseableKt" // calls to this class are usually generated
    ])
}

// --- ktlint -- checking format style and formatting

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

// --- detekt -- code complexity checker

detekt {
    toolVersion = "1.15.0-RC1"                            // Version of Detekt that will be used. When unspecified the latest detekt version found will be used. Override to stay on the same version.
    input = files(                                        // The directories where detekt looks for source files. Defaults to `files("src/main/java", "src/main/kotlin")`.
        "src/main/kotlin",
        "gensrc/main/kotlin"
    )
    parallel = false                                      // Builds the AST in parallel. Rules are always executed in parallel. Can lead to speedups in larger projects. `false` by default.
    config = files("config/detekt/config.yml")            // Define the detekt configuration(s) you want to use. Defaults to the default detekt configuration.
    buildUponDefaultConfig = false                        // Interpret config files as updates to the default config. `false` by default.
    baseline = file("config/detekt/baseline.xml")         // Specifying a baseline file. All findings stored in this file in subsequent runs of detekt.
    disableDefaultRuleSets = false                        // Disables all default detekt rulesets and will only run detekt with custom rules defined in plugins passed in with `detektPlugins` configuration. `false` by default.
    debug = false                                         // Adds debug output during task execution. `false` by default.
    ignoreFailures = false                                // If set to `true` the build does not fail when the maxIssues count was reached. Defaults to `false`.
    ignoredBuildTypes = ["release"]                       // Android: Don't create tasks for the specified build types (e.g. "release")
    ignoredFlavors = ["production"]                       // Android: Don't create tasks for the specified build flavor (e.g. "production")
    ignoredVariants = ["productionRelease"]               // Android: Don't create tasks for the specified build variants (e.g. "productionRelease")
    reports {
        xml {
            enabled = false
        }
        html {
            enabled = true
            destination = file("build/reports/detekt/detekt.html")
        }
        txt {
            enabled = true
            destination = file("build/reports/detekt/detekt.txt")
        }
    }
}

// --- OWASP dependency check -- vulnerability check of library dependencies

dependencyCheck {
    failBuildOnCVSS = 7
    failOnError = true
    suppressionFile = 'app/config/dependencyCheck/suppressions.xml'
}

// --- application

application {
    mainClass.set('org.hostsharing.hsadmin.billing.core.Billing')
}
