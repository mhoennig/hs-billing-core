
plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.21'
    id 'application'
    id 'jacoco'
    id 'info.solidsoft.pitest' version '1.5.1'
}

repositories {
    mavenCentral()
}

configurations {
    ktlint
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}

compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}

dependencies {
    ext.kotlinVersion = '1.4.0'
    ext.junit_version = "5.7.0"

    // Align versions of all Kotlin components
    implementation platform('org.jetbrains.kotlin:kotlin-bom')

    // Kotlin standard libraries
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    // we don't need logging, avoid warning on startup
    implementation 'org.slf4j:slf4j-nop:1.7.30'

    // other
    implementation 'org.apache.velocity:velocity:1.7'
    implementation 'com.github.doyaaaaaken:kotlin-csv-jvm:0.13.0'

    // unit testing libraries
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_version"
    testImplementation 'com.willowtreeapps.assertk:assertk-jvm:0.23'
    testImplementation "io.mockk:mockk:1.10.2"
    testImplementation 'com.tngtech.archunit:archunit-junit5:0.14.1'
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"

    testImplementation 'org.pitest:pitest-junit5-plugin:0.12'

    // linting
    ktlint "com.pinterest:ktlint:0.40.0"
}

build {
    dependsOn 'pitest'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // generate report after tests
}

// --- jacoco plugin configuration --- measures code coverage of unit tests ---

jacocoTestReport {
    dependsOn test // tests are a prerequisite for report
}

jacoco {
    toolVersion = "0.8.6"
    reportsDir = file("$buildDir/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            includes = ['org.hostsharing.hsadmin.billing.core.*']
            excludes = []

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
        }
    }
}

// --- pitest configuration --- runs mutation tests, thus testing the quality of the unit tests ---

pitest {
    junit5PluginVersion.set('0.12')
    targetClasses.set(['org.hostsharing.hsadmin.billing.core.*'])
    pitestVersion.set('1.6.1') //not needed when a default PIT version should be used
    threads.set(4)
    outputFormats.set(['XML', 'HTML'])
    timestampedReports.set(false)
    mutationThreshold.set(85)
    mutators.set(["STRONGER", "DEFAULTS"])
    avoidCallsTo.set(["kotlin.jvm.internal", "kotlinx.coroutines"])
}

// --- ktlint -- checking format style and formatting

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

// --- application

application {
    mainClass.set('org.hostsharing.hsadmin.billing.core.Billing')
}
